import React, { Fragment, useCallback, useEffect, useMemo, useState } from "react";import clsx from 'clsx';import {Markdown} from "y-markdown";import CodeEditor from "../../component/CodeEditor";import RLResize from "../../component/RLResize";import RunTimeCode from "./RunTimeCode";import ConsoleViewBox from "./ConsoleViewBox";import { useSource } from "../../utils/hooks";import parseDoc from "../../utils/parseDoc";import _ from "lodash";function ConsoleView(props) {    const { theme, delay, direction,dependencies,openConsole,resizeOps } = props;    const source = useSource(props);    const {htmls,codes} = useMemo(()=>parseDoc(source),[source]);    return <div className={"cv-console-view"}>        {            _.map(htmls,(x,i)=>{                if(_.isString(x)) return <Markdown key={i}>{x}</Markdown>                const {value,key} = x;                const code = _.find(codes,x=>x.key === key);                return <Fragment key={i}>                    <Markdown>{value}</Markdown>                    <CodeBox delay={delay} dependencies={dependencies}                             theme={theme} openConsole={openConsole}                             sourceCode={code.value}                             resizeOps={resizeOps} direction={direction}/>                </Fragment>            })        }    </div>}ConsoleView.defaultProps = {    theme: 'panda-syntax',    delay: 600,    direction: 'across', //可选'across'、'vertical',    resizeOps:{},    dependencies:null,    openConsole:false}export default ConsoleView;//function CodeBox({theme,resizeOps,direction,delay,openConsole,sourceCode,dependencies}){    const [code, setCode] = useState(sourceCode);    const [consoleData,setConsoleData] = useState([]);    const execute = useExecute({ setConsoleData, dependencies, openConsole })    useDelayExecute(code,delay,execute)    const left_code = <CodeEditor expanded onChange={ setCode } theme={ theme } code={ code }/>;    const right_view = <ConsoleViewBox data={consoleData}/>;    return <div className={clsx('cv-console-view-code-box',direction)}>        {            direction === 'across' ? <RLResize left={left_code} right={right_view} {...resizeOps}/>                : <Fragment>{left_code} {right_view}</Fragment>        }    </div>}//hookfunction useExecute({ setConsoleData, dependencies, openConsole }){    return useCallback((code)=>{        const __module = [];        try{            const params = {                __module,                __dependencies:dependencies,                __openConsole:openConsole            }            RunTimeCode.create(code).runtime(params);        }catch(e){            // console.error(e);            __module.push([{                __type:'error',                info:e.message            }])        }        setConsoleData(__module);    },[dependencies, openConsole])}function useDelayExecute(code,delay,execute){    useEffect(()=>{        const timeId = setTimeout(()=>{            execute(code);            clearTimeout(timeId);        },delay)        return ()=>clearTimeout(timeId);    },[code,delay,execute]);}