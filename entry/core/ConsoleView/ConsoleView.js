import React, {Fragment, useEffect, useMemo, useState} from "react";import _ from 'lodash';import clsx from 'clsx';import {Markdown} from "y-markdown";import CodeEditor from "../CodeEditor";import parseHTML_RunCode from "../../utils/parseHTML_RunCode";import RLResize from "../../component/RLResize";import RunTimeCode from "./RunTimeCode";import ConsoleViewBox from "./ConsoleViewBox";function ConsoleView(props) {    const { theme, delay, direction,dependencies,openConsole } = props;    const source = useMemo(() =>{        const res = props.source || props.children;        return _.get(res, 'default',res);    }, [props.source, props.children]);    const [code, setCode] = useState(parseHTML_RunCode(source).code);    const [consoleData,setConsoleData] = useState([]);    useEffect(()=>{        const timeId = setTimeout(()=>{            executeCode(code);            clearTimeout(timeId);        },delay)        return ()=>clearTimeout(timeId);        function executeCode(code){            const GlobData = [];            try{                RunTimeCode.create(code,dependencies).runtime(GlobData,dependencies,openConsole);            }catch(e){                // console.error(e);                GlobData.push([{                    __type:'error',                    info:String(e)                }])            }            setConsoleData(GlobData);        }    },[code,delay,dependencies,openConsole])    const { beforeHTML, afterHTML, code:sourceCode } = useMemo(() => parseHTML_RunCode(source), [source]);    const left_code = <CodeEditor expanded onChange={ setCode } theme={ theme } code={ code }/>;    const right_view = <ConsoleViewBox data={consoleData}/>    return <div className={"cv-console-view"}>        <Markdown>{ beforeHTML }</Markdown>        {            sourceCode && <div className={clsx('cv-console-view-code-box',direction)}>                {                    direction === 'across' ? <RLResize left={left_code} right={right_view} {...props.resizeOps}/>                        : <Fragment>{left_code} {right_view}</Fragment>                }            </div>        }        { afterHTML && <Markdown>{ afterHTML }</Markdown> }    </div>}ConsoleView.defaultProps = {    theme: 'panda-syntax',    delay: 600,    direction: 'across', //可选'across'、'vertical',    resizeOps:{},    dependencies:null,    openConsole:false}export default ConsoleView;